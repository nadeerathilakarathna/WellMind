from services.database import Report
import matplotlib
matplotlib.use('Agg')  # Set non-GUI backend before importing pyplot
import matplotlib.pyplot as plt
import os
import random
import string
import threading
import base64
import subprocess
import platform
from datetime import datetime


def generate_report_thread():
    """Generate complete report in a separate thread"""
    
    # Variable for base64 logo image (you can replace this with your actual logo)
    LOGO_BASE64 = """
    
    """
    
    def create_logo_file():
        """Create logo file from base64 if it doesn't exist"""
        logo_path = 'reports/images/logo.png'
        if not os.path.exists(logo_path):
            # Decode base64 and save as PNG
            logo_data = base64.b64decode(LOGO_BASE64)
            with open(logo_path, 'wb') as f:
                f.write(logo_data)
        return logo_path
    
    def open_pdf_with_default_program(filepath):
        """Open PDF file with default system program"""
        try:
            if platform.system() == 'Darwin':       # macOS
                subprocess.call(('open', filepath))
            elif platform.system() == 'Windows':    # Windows
                os.startfile(filepath)
            else:                                   # Linux and other Unix systems
                subprocess.call(('xdg-open', filepath))
        except Exception as e:
            print(f"Could not open PDF with default program: {e}")
            print(f"Please open the file manually: {filepath}")

    # Create reports/images directory if it doesn't exist
    os.makedirs('reports/images', exist_ok=True)

    # Dictionary to store date:filename mapping
    saved_images_dict = {}

    report = Report()
    for date in report.date_list:
        report_data = report.get_report_data(date=date)

        if report_data['stress_data']:
            rows = report_data['stress_data']

            timestamps = []
            facial_expression_stresses = []
            keystroke_stresses = []
            overall_stresses = []
            
            for row in rows:
                timestamps.append(row[1])  # timestamp
                facial_expression_stresses.append(row[2] if row[2] is not None else None)  # facial expression stress
                keystroke_stresses.append(row[3] if row[3] is not None else None)  # keystroke stress
                overall_stresses.append(row[5] if row[5] is not None else None)  # overall stress
            
            if timestamps:
                fig, ax = plt.subplots(figsize=(6, 2.5))

                # Convert timestamps to datetime objects for plotting
                datetime_objects = [datetime.strptime(ts, "%Y-%m-%d %H:%M:%S") for ts in timestamps]
                
                # Sort all data by timestamp to ensure proper line plotting
                data_tuples = list(zip(datetime_objects, facial_expression_stresses, keystroke_stresses, overall_stresses))
                sorted_data = sorted(data_tuples, key=lambda x: x[0])  # Sort only by datetime (first element)
                datetime_objects, facial_expression_stresses, keystroke_stresses, overall_stresses = zip(*sorted_data)
                
                # Track if any data was plotted for legend
                has_plotted_data = False
                
                # Plot facial expression stress data
                facial_valid_data = [(dt, stress) for dt, stress in zip(datetime_objects, facial_expression_stresses) if stress is not None]
                if facial_valid_data:
                    facial_times, facial_values = zip(*facial_valid_data)
                    ax.plot(facial_times, facial_values, marker="o", color="#e3e31e", 
                        linewidth=1, markersize=1.5, label="Facial Expression Stress", alpha=0.8, 
                        linestyle='-', drawstyle='default')
                    has_plotted_data = True
                
                # Plot keystroke stress data
                keystroke_valid_data = [(dt, stress) for dt, stress in zip(datetime_objects, keystroke_stresses) if stress is not None]
                if keystroke_valid_data:
                    keystroke_times, keystroke_values = zip(*keystroke_valid_data)
                    ax.plot(keystroke_times, keystroke_values, marker="o", color="#e3531e", 
                        linewidth=1, markersize=1.5, label="Keystroke Stress", alpha=0.8, 
                        linestyle='-', drawstyle='default')
                    has_plotted_data = True
                
                # Plot overall stress data
                overall_valid_data = [(dt, stress) for dt, stress in zip(datetime_objects, overall_stresses) if stress is not None]
                if overall_valid_data:
                    overall_times, overall_values = zip(*overall_valid_data)
                    ax.plot(overall_times, overall_values, marker="o", color="#3F51B5", 
                        linewidth=2, markersize=3, label="Overall Stress", 
                        linestyle='-', drawstyle='default')
                    has_plotted_data = True
                
                # Add recommendation vertical lines
                if report_data['recommendation_data']:
                    # Track which feedback types we've added to legend to avoid duplicates
                    added_to_legend = {'green': False, 'red': False, 'orange': False}
                    
                    for rec_row in report_data['recommendation_data']:
                        rec_timestamp = rec_row[0]  # created_at
                        feedback = rec_row[1]  # feedback
                        
                        # Convert timestamp to datetime object
                        try:
                            rec_datetime = datetime.strptime(rec_timestamp, "%Y-%m-%d %H:%M:%S")
                            
                            # Determine color based on feedback value
                            if feedback == 1:
                                color = 'green'
                                legend_label = 'Positive Feedback' if not added_to_legend['green'] else None
                                added_to_legend['green'] = True
                            elif feedback == 0:
                                color = 'red'
                                legend_label = 'Negative Feedback' if not added_to_legend['red'] else None
                                added_to_legend['red'] = True
                            else:  # feedback is None or other value
                                color = 'orange'
                                legend_label = 'No Feedback' if not added_to_legend['orange'] else None
                                added_to_legend['orange'] = True
                            
                            # Draw vertical dotted line across the entire y-range
                            ax.axvline(x=rec_datetime, color=color, linestyle='--', 
                                     linewidth=0.5, alpha=0.8, label=legend_label, zorder=5)
                            
                        except ValueError:
                            # Skip invalid timestamp formats
                            continue
                    
                    has_plotted_data = True
                
                # Get date range from data info
                point_date_str = report_data['end_timestamp']
                before_date_str = report_data['start_timestamp']
                point_date_dt = datetime.strptime(point_date_str, "%Y-%m-%d %H:%M:%S")
                before_date_dt = datetime.strptime(before_date_str, "%Y-%m-%d %H:%M:%S")
                
                # Set x-axis limits to the actual date range
                ax.set_xlim(before_date_dt, point_date_dt)
                
                # Set y-axis limits to 0-100
                ax.set_ylim(0, 100)
                
                # Format x-axis based on the selected period
                ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter("%H:%M"))
                ax.xaxis.set_major_locator(plt.matplotlib.dates.HourLocator(interval=2))
                
                # Rotate x-axis labels for better readability
                plt.xticks(rotation=45)
                
                # Add legend only if there's data to show
                if has_plotted_data:
                    # Get all legend handles and labels
                    handles, labels = ax.get_legend_handles_labels()
                    
                    # Separate stress data and recommendation items
                    stress_handles = []
                    stress_labels = []
                    rec_handles = []
                    rec_labels = []
                    
                    for handle, label in zip(handles, labels):
                        if label in ['Facial Expression Stress', 'Keystroke Stress', 'Overall Stress']:
                            stress_handles.append(handle)
                            stress_labels.append(label)
                        elif label in ['Positive Feedback', 'Negative Feedback', 'No Feedback']:
                            rec_handles.append(handle)
                            rec_labels.append(label)
                    
                    # Create combined legend with section titles
                    combined_handles = []
                    combined_labels = []
                    
                    if stress_handles:
                        # Add stress section
                        combined_handles.append(plt.Line2D([0], [0], color='none'))  # Invisible line for title
                        combined_labels.append('Stress Levels')
                        combined_handles.extend(stress_handles)
                        combined_labels.extend(stress_labels)
                    
                    if rec_handles:
                        # Add recommendation section
                        combined_handles.append(plt.Line2D([0], [0], color='none'))  # Invisible line for title
                        combined_labels.append('Recommendations')
                        combined_handles.extend(rec_handles)
                        combined_labels.extend(rec_labels)
                    
                    # Create legend with custom formatting
                    legend = ax.legend(combined_handles, combined_labels, loc='upper right', fontsize=6)
                    
                    # Style the section titles (make them bold)
                    for i, text in enumerate(legend.get_texts()):
                        if text.get_text() in ['Stress Levels', 'Recommendations']:
                            text.set_weight('bold')
                            text.set_color('black')
                else:
                    # Display "No data available" message if no valid data was plotted
                    ax.text(0.5, 0.5, 'No valid stress data available', 
                           horizontalalignment='center', verticalalignment='center', 
                           transform=ax.transAxes, fontsize=12, color='gray')
                
                # Add title with the date
                ax.set_title(f"Stress Data - {date}", fontsize=10, pad=10)
                
                # Generate random 6-digit string
                random_digits = ''.join(random.choices(string.digits, k=6))
                
                # Create filename with date and random digits
                filename = f"{date}_{random_digits}.png"
                filepath = os.path.join('reports', 'images', filename)
                
                # Save the plot without any metadata or watermarks
                plt.savefig(filepath, dpi=300, bbox_inches='tight', 
                           metadata=None, facecolor='white', edgecolor='none')
                saved_images_dict[date] = filename
                plt.close()  # Close the figure to free memory
        else:
            # Display graph with "No data available" message when stress_data is empty
            fig, ax = plt.subplots(figsize=(6, 2.5))
            
            # Set y-axis limits to 0-100
            ax.set_ylim(0, 100)
            
            # Display "No data available" message
            ax.text(0.5, 0.5, 'No stress data available for this date', 
                   horizontalalignment='center', verticalalignment='center', 
                   transform=ax.transAxes, fontsize=12, color='gray')
            
            # Add title with the date
            ax.set_title(f"Stress Data - {date}", fontsize=10, pad=10)
            
            # Remove ticks since there's no data
            ax.set_xticks([])
            ax.set_yticks([])
            
            # Generate random 6-digit string
            random_digits = ''.join(random.choices(string.digits, k=6))
            
            # Create filename with date and random digits
            filename = f"{date}_{random_digits}.png"
            filepath = os.path.join('reports', 'images', filename)
            
            # Save the plot without any metadata or watermarks
            plt.savefig(filepath, dpi=300, bbox_inches='tight', 
                       metadata=None, facecolor='white', edgecolor='none')
            saved_images_dict[date] = filename
            plt.close()  # Close the figure to free memory

    # Generate HTML report after all graphs are created
    create_logo_file()
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Wellmind Report</title>
        <style>
            @page {{
                size: A4;
                margin: 20mm;
            }}
            
            body {{
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: white;
                color: #333;
                line-height: 1.6;
            }}
            
            .header {{
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 3px solid #4CAF50;
                padding-bottom: 20px;
                margin-bottom: 30px;
            }}
            
            .logo {{
                width: 80px;
                height: 80px;
                object-fit: contain;
            }}
            
            .title {{
                flex-grow: 1;
                text-align: center;
            }}
            
            .title h1 {{
                margin: 0;
                color: #2E7D32;
                font-size: 2.5em;
                font-weight: bold;
            }}
            
            .title p {{
                margin: 5px 0 0 0;
                color: #666;
                font-size: 1.1em;
            }}
            
            .report-section {{
                margin-bottom: 40px;
                page-break-inside: avoid;
            }}
            
            .graph-container {{
                text-align: center;
                margin: 30px 0;
                page-break-inside: avoid;
            }}
            
            .graph-title {{
                font-size: 1.3em;
                font-weight: bold;
                color: #2E7D32;
                margin-bottom: 10px;
            }}
            
            .graph-date {{
                font-size: 1em;
                color: #666;
                margin-bottom: 15px;
            }}
            
            .graph-image {{
                width: 100%;
                height: auto;
                border: 1px solid #ddd;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }}
            
            .footer {{
                margin-top: 10px;
                text-align: center;
                font-size: 0.9em;
                color: #666;
            }}
            
            @media print {{
                body {{
                    background-color: white;
                }}
                
                .graph-container {{
                    page-break-inside: avoid;
                }}
                
                .header {{
                    page-break-after: avoid;
                }}
            }}
        </style>
    </head>
    <body>
        <div class="header">
            <img src="images/logo.png" alt="Wellmind Logo" class="logo">
            <div class="title">
                <h1>Wellmind Report</h1>
                <p>Stress Analysis and Recommendations</p>
            </div>
            <div style="width: 80px;"></div> <!-- Spacer for centering -->
        </div>
        
        <div class="report-section">
    """
    
    # Add all graphs to the report
    for date, filename in saved_images_dict.items():
        # Format date for display
        try:
            formatted_date = datetime.strptime(date, "%Y-%m-%d").strftime("%B %d, %Y")
        except:
            formatted_date = date
            
        html_content += f"""
            <div class="graph-container">
                <div class="graph-title">Daily Stress Analysis</div>
                <div class="graph-date">{formatted_date}</div>
                <img src="images/{filename}" alt="Stress data for {date}" class="graph-image">
            </div>
        """
    
    html_content += """
        </div>
        
        <div class="footer">
            <p>Generated by Wellmind Stress Monitoring System</p>
        </div>
    </body>
    </html>
    """
    
    # Save HTML file with timestamp
    current_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    html_filepath = f'reports/wellmind_report_{current_timestamp}.html'
    with open(html_filepath, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    # Simple HTML to PDF conversion using browser print
    pdf_filepath = f'reports/wellmind_report_{current_timestamp}.pdf'
    
    try:
        # Create a simple script to convert HTML to PDF using Chrome/Chromium headless
        if platform.system() == "Windows":
            chrome_paths = [
                r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
            ]
        elif platform.system() == "Darwin":  # macOS
            chrome_paths = ["/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"]
        else:  # Linux
            chrome_paths = ["google-chrome", "chromium-browser", "google-chrome-stable"]
        
        chrome_path = None
        for path in chrome_paths:
            if os.path.exists(path) if os.path.isabs(path) else True:
                chrome_path = path
                break
        
        if chrome_path:
            abs_html_path = os.path.abspath(html_filepath)
            abs_pdf_path = os.path.abspath(pdf_filepath)
            file_url = f"file:///{abs_html_path.replace(os.sep, '/')}"
            
            cmd = [
                chrome_path,
                '--headless',
                '--disable-gpu',
                '--print-to-pdf=' + abs_pdf_path,
                '--print-to-pdf-no-header',
                '--no-margins',
                '--hide-scrollbars',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor',
                file_url
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and os.path.exists(pdf_filepath):
                print(f"PDF generated successfully: {pdf_filepath}")
                # Open PDF with default system program
                open_pdf_with_default_program(abs_pdf_path)
            else:
                print(f"PDF generation failed. HTML report available at: {html_filepath}")
                print(f"Error: {result.stderr}")
        else:
            print("Chrome/Chromium not found. HTML report available at:", html_filepath)
            
    except Exception as e:
        print(f"PDF generation failed: {e}")
        print(f"HTML report available at: {html_filepath}")
    
    print(f"Report generation completed")
    print(f"HTML report: {html_filepath}")
    print(f"Saved images: {saved_images_dict}")


# Start report generation in a separate thread
def start_report_generation():
    """Start the report generation process in a separate thread"""
    print("Starting report generation in background thread...")
    thread = threading.Thread(target=generate_report_thread, daemon=True)
    thread.start()
    return thread

# Call this function to start the process
if __name__ == "__main__":
    report_thread = start_report_generation()
    
    # Optional: Wait for thread to complete if running as main script
    report_thread.join()
    print("Report generation thread completed.")